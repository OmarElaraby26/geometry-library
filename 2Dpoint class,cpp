#define EPS 1e-9
#define Vector Point
#define _T_ long long // or long double
class Point {
public:
	_T_ x, y;
	Point() :
			x(0), y(0) {
	}

	Point(const _T_ a, const _T_ b) :
			x(a), y(b) {
	}

	Point(const Point &other) :
			Point(other.x, other.y) {
	}

	Point& operator =(const Point &other) {
		x = other.x;
		y = other.y;
		return *this;
	}

	Point& operator -=(const Point &other) {
		Point(x - other.x, y - other.y);
		return *this;
	}

	Point& operator +=(const Point &other) {
		Point(x + other.x, y + other.y);
		return *this;
	}

	Point& operator *=(const Point &other) {
		Point(x * other.x, y * other.y);
		return *this;
	}

	Point operator +(const Point &other) const {
		return Point(x + other.x, y + other.y);
	}

	Point operator -(const Point &other) const {
		return Point(x - other.x, y - other.y);
	}

	Point operator *(const _T_ factor) const {
		return Point(x * factor, y * factor);
	}

	// factor must be long double
	Point operator /(const _T_ factor) const {
		assert(factor != 0);
		return Point(x / factor, y / factor);
	}

	Point operator -() const {
		return Point(-x, -y);
	}

	bool operator ==(const Point &other) const {
		return (abs(x - other.x) < EPS && abs(y - other.y) < EPS);
	}

	bool operator !=(const Point &other) const {
		return !operator==(other);
	}

	bool operator <(const Point &other) const {
		if (abs(x - other.x) < EPS) { //equal
			if (abs(y - other.y) < EPS) return false;
			return y < other.y;
		}
		return x < other.x;
	}

	bool operator <=(const Point &other) const {
		return (operator==(other) || operator<(other));
	}

	bool operator >(const Point &other) const {
		if (abs(x - other.x) < EPS) { //equal
			if (abs(y - other.y) < EPS) return false;
			return y > other.y;
		}
		return x > other.x;
	}

	bool operator >=(const Point &other) const {
		return operator==(other) || operator>(other);
	}

	Point translate(const Vector &t) const {
		return this->operator+(t);
	}

// scaling vector c->p by ratio
	Point scale(const Point &c, const double ratio) {
		// make vector c->p then scale this vector by ratio
		// then get the new point and return it
		// return new Point p' not new Vector cp'
		return (*this - c) * ratio + c;
	}

	Point scale(const double ratio) const {
		return operator*(ratio); // return new Vector v'
	}

// rotate point by theta degree around point c
	Point rotate(const Point &c, const double deg) const {
		double rad = deg / 180.0 * acos(-1);

		Vector vec(*this - c);

		vec = Vector(vec.x * cos(rad) - vec.y * sin(rad),
				vec.y * cos(rad) + vec.x * sin(rad));

		return vec + c;
	}

	Point rotate90(const Point &c) const {
		//	vec(x, y)->vec(y, -x);
		Vector vec(*this - c);
		return Point(vec.y, -vec.x) + c;
	}

	Point rotate180(const Point &c) const {
//		vec(x, y)->vec(-x, -y);
		Vector vec(*this - c);
		vec = -vec;
		return vec + c;
	}

	Point rotate270(const Point &c) const {
//		vec(x, y)->vec(-y, x);
		Vector vec(*this - c);
		return Point(-vec.y, vec.x) + c;
	}

	Point perp() const {
		return this->rotate270(Point(0, 0));
	}
};

Point make_point(const _T_ a, const _T_ b) {
	return Point(a, b);
}

ostream& operator<<(ostream &out, const Point &p) {
	return out << p.x << ' ' << p.y;
}

istream& operator>>(istream &in, Point &p) {
	return in >> p.x >> p.y;
}

_T_ crossProduct(const Vector &a, const Vector &b) {
	// |a|*|b|*sin(x)
	return (a.x * b.y - a.y * b.x);
}

_T_ dotProduct(const Vector &a, const Vector &b) {
	// |a|*|b|*cos(x)
	return (a.x * b.x + a.y * b.y);
}

// return positive value if c turn left
// return negative value if c turn right
// return ZERO if c on the same line(not necessary on the same segment)
_T_ orient(const Point &a, const Point &b, const Point &c) {
	return crossProduct(b - a, c - a);
}

// squared absolute value
_T_ sq(const Point &p) {
	return p.x * p.x + p.y * p.y;
}
long double abs(const Point &p) {
	return sqrtl(sq(p));
}

class Line {
public:
	Vector v;
	_T_ c;

	Line(const Vector _v, const _T_ _c) :
			v(_v), c(_c) {
	}

	Line(_T_ _a, _T_ _b, _T_ _c) :
			v(_b, -_a), c(_c) {
	}

	Line(const Point &p, const Point &q) :
			v(q - p), c(crossProduct(v, p)) {
	}

	// return 0 if point ON line
	// return > 0 if point on POSITIVE side
	// return < 0 if point on NEGATIVE side
	// positive side will be above the line if the line
	// from bottom-left to top-right
	_T_ side(const Point &p) const {
		return crossProduct(this->v, p) - this->c;
	}

	// shortest distance between the line and point 'p'
	long double distance(const Point &p) const {
		return abs(side(p)) / abs(v);
	}

	long double sqDistance(const Point &p) const {
		return side(p) * side(p) / (long double) sq(this->v);
	}

	// get line which is perp on the original one
	// and the point 'p' lies on the new one
	Line perpThrough(const Point &p) const {
		return Line(p, p + v.perp());
	}

	// sorting along the line
	bool cmpProj(const Point &p, const Point &q) const {
		return dotProduct(this->v, p) < dotProduct(this->v, q);
	}

	// translate the line by a vector 't'
	// only c will change. we should calculate the new c'
	Line translate(const Vector &t) const {
		return Line(v, c + crossProduct(v, t));
	}

	// same as translate.
	// except we translate by a vector perp to the line
	// translate to the left by 'dist'
	// or to the right by -'dist'
	Line shiftLeft(const double dist) const {
		return Line(v, c + dist * abs(v));
	}

	bool interSection(const Line &l2, Point &interP) const {
		const _T_ d = crossProduct(this->v, l2.v);

		if (abs(d) < EPS) return false;

		// interP -> intersection Point
		// requires long double
		interP = (l2.v * this->c - this->v * l2.c) / (long double) d;

		return true;
	}

	// return point 'p
	// that is the point p after dropped on the line
	Point project(const Point &p) const {
		return p - this->v.perp() * this->side(p) / sq(v);
	}

	Point reflect(const Point &p) const {
		return p - (this->v.perp() * 2.0 * this->side(p) / sq(this->v));
	}

	Line bisector(const Line &l2, const bool interior) const {
		//  two lines can not be parallel
		assert(abs(crossProduct(this->v,l2.v)) >= EPS);

		// interior == true means line between smallest angle
		double sign = interior ? 1 : -1;

		return Line(l2.v / abs(l2.v) + this->v / abs(this->v) * sign,
				l2.c / abs(l2.v) + this->c / abs(this->v) * sign);
	}

};

// Is testP is in disk of segment a-b ?
bool isInDisk(const Point &a, const Point &b, const Point &testP) {
	_T_ res = dotProduct(a - testP, b - testP);
	return (res < 0 || abs(res) < EPS);
}

bool isOnSegment(const Point &a, const Point &b, const Point &testP) {
	return (abs(orient(a, b, testP)) < EPS && isInDisk(a, b, testP));
}

bool ProperInter(const Point &a, const Point &b, const Point &c, const Point &d,
		Point &InterP) {
	double oa = orient(c, d, a);
	double ob = orient(c, d, b);
	double oc = orient(a, b, c);
	double od = orient(a, b, d);

	// should take care of precision error ?
	// use EPS in the following conditions ?
	if (oa * ob < 0 && oc * od < 0) {
		InterP = (a * ob - b * oa) / (ob - oa);
		return true;
	}

	return false;
}

struct cmpSegSegInter {
	bool operator ()(const Point &a, const Point &b) const {
		return a < b;
	}
};
// return intersection between seg a-b & seg c-d
// if size of returned set is 1 then the intersection is point
// else if 2 then the intersection is segment
// else (0) the no intersection
set<Point, cmpSegSegInter> segSegInter(const Point &a, const Point &b,
		const Point &c, const Point &d) {

	Point out;
	if (ProperInter(a, b, c, d, out)) return {out};

	set<Point, cmpSegSegInter> s;
	if (isOnSegment(c, d, a)) s.insert(a);
	if (isOnSegment(c, d, b)) s.insert(b);
	if (isOnSegment(a, b, c)) s.insert(c);
	if (isOnSegment(a, b, d)) s.insert(d);

	return s;
}

// return shortest distance from point p to seg a-b
long double segPointDistance(const Point &a, const Point &b, const Point &p) {
	if (a != b) {
		Line l(a, b);
		if (l.cmpProj(a, p) && l.cmpProj(p, b)) {
			return l.distance(p);
		}
	}

	return min(abs(p - a), abs(p - b));
}

// return shortest distance between seg a-b and seg c-d
long double segSegDistance(const Point &a, const Point &b, const Point &c,
		const Point &d) {
	Point dummy;
	if (ProperInter(a, b, c, d, dummy)) return 0;

	return min( { segPointDistance(a, b, c), segPointDistance(a, b, d),
			segPointDistance(c, d, a), segPointDistance(c, d, b) });
}

